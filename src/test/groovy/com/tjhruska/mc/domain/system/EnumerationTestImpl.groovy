/**
Copyright 2011-2015 Timothy James Hruska (tjhruska@yahoo.com)

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
  
package com.tjhruska.mc.domain.system

import org.springframework.context.annotation.Lazy
import org.springframework.beans.factory.annotation.Autowired
import static org.junit.Assert.*
import org.junit.Before
import org.junit.Ignore

import groovy.util.logging.Slf4j

import com.tjhruska.mc.database.BaseDomain
import com.tjhruska.mc.database.DaoDomain
import com.tjhruska.mc.database.test.GeneratedDomainAndDaoTestIface

import com.tjhruska.mc.database.test.GeneratedDomainAndDaoTest
import com.tjhruska.mc.enums.AutoCreationMethod
import com.tjhruska.mc.enums.ChildTableSynchMethod
import com.tjhruska.mc.enums.Datatype
import com.tjhruska.mc.enums.DbIndex
import com.tjhruska.mc.domain.system.EnumerationLink
import com.tjhruska.mc.domain.system.EnumerationValue
import java.util.ArrayList
import java.util.HashSet
import java.util.List
import java.util.Set
import com.tjhruska.mc.domain.system.EnumerationValue
import com.tjhruska.mc.domain.system.EnumerationValueTest
import com.tjhruska.mc.domain.system.EnumerationLink
import com.tjhruska.mc.domain.system.EnumerationLinkTest
import com.tjhruska.mc.domain.system.EnumerationLink
import com.tjhruska.mc.domain.system.EnumerationLinkTest
  

//    Class contains database constraints which can't be accommodated in autogenerated code.
//    To activate test: extend test class, and tweak fields with constraints to match database expectations.
//    (Extended class won't be wiped out on regeneration, and must continue to match database expectations.)
@Ignore 
@Slf4j
class EnumerationTestImpl extends GeneratedDomainAndDaoTest implements EnumerationTest {
  
  @Autowired
  DaoDomain<Enumeration> enumerationDao

  @Autowired
  @Lazy
  EnumerationLinkTest enumerationLinkTest

  @Autowired
  @Lazy
  EnumerationValueTest enumerationValueTest

  @Override
  public DaoDomain getDao() {
    enumerationDao
  }


  @Override
  public BaseDomain getTestObject(Integer number, Integer sequence, Boolean addChildrenFlag) {
    Enumeration enumeration = new Enumeration()
    
    enumeration.setName("name${number}")
    enumeration.setTableName("tablename${number}")
    enumeration.setTableNameCamelCase("tablename_camel_case${number}")
    enumeration.setSchemaName("schema_name${number}")
    enumeration.setPostCreateSQL("post_create_sql${number}")
    enumeration.setChildTableSynchMethod(ChildTableSynchMethod.getChildTableSynchMethodBySequence(1))
    enumeration.setAutoCreationMethod(AutoCreationMethod.getAutoCreationMethodBySequence(1))
    enumeration.setFolderTag("folder_tag${number}")
    enumeration.setJavaPackage("java_package${number}")
    enumeration.setColumn1Name("column1_name${number}")
    enumeration.setColumn1NameCamelCase("column1_name_camel_case${number}")
    enumeration.setColumn1DataType(Datatype.getDatatypeBySequence(1))
    enumeration.setColumn1DbIndex(DbIndex.getDbIndexBySequence(1))
    enumeration.setColumn1NotNullFlag(number == 0 || 16%number == 0)
    enumeration.setColumn1Default("column1_default${number}")
    enumeration.setColumn2Name("column2_name${number}")
    enumeration.setColumn2NameCamelCase("column2_name_camel_case${number}")
    enumeration.setColumn2DataType(Datatype.getDatatypeBySequence(1))
    enumeration.setColumn2DBIndex(DbIndex.getDbIndexBySequence(1))
    enumeration.setColumn2NotNullFlag(number == 0 || 22%number == 0)
    enumeration.setColumn2Default("column2_default${number}")
    enumeration.setColumn3Name("column3_name${number}")
    enumeration.setColumn3NameCamelCase("column3_name_camel_case${number}")
    enumeration.setColumn3DataType(Datatype.getDatatypeBySequence(1))
    enumeration.setColumn3DBIndex(DbIndex.getDbIndexBySequence(1))
    enumeration.setColumn3NotNullFlag(number == 0 || 28%number == 0)
    enumeration.setColumn3Default("column3_default${number}")
    enumeration.setColumn4Name("column4_name${number}")
    enumeration.setColumn4NameCamelCase("column4_name_camel_case${number}")
    enumeration.setColumn4DataType(Datatype.getDatatypeBySequence(1))
    enumeration.setColumn4DBIndex(DbIndex.getDbIndexBySequence(1))
    enumeration.setColumn4NotNullFlag(number == 0 || 34%number == 0)
    enumeration.setColumn4Default("column4_default${number}")
    enumeration.setColumn5Name("column5_name${number}")
    enumeration.setColumn5NameCamelCase("column5_name_camel_case${number}")
    enumeration.setColumn5DataType(Datatype.getDatatypeBySequence(1))
    enumeration.setColumn5DBIndex(DbIndex.getDbIndexBySequence(1))
    enumeration.setColumn5NotNullFlag(number == 0 || 40%number == 0)
    enumeration.setColumn5Default("column5_default${number}")
    
    List<EnumerationValue> enumerationValues = new ArrayList()
    if (addChildrenFlag && enumerationValueTest != null) {
      enumerationValueTest.enumeration = enumeration
      (1..(number+2)).each { i ->
      enumerationValues.add(enumerationValueTest.getTestObject(i+(10*number), i-1))
      }
    }
    enumeration.setEnumerationValues(enumerationValues)

    Set<EnumerationLink> linksAsA = new HashSet()
    if (addChildrenFlag && enumerationLinkTest != null) {
      enumerationLinkTest.enumerationA = enumeration
      (1..(number+2)).each { i ->
      linksAsA.add(enumerationLinkTest.getTestObject(i+(10*number), i-1))
      }
    }
    enumeration.setLinksAsA(linksAsA)

    Set<EnumerationLink> linksAsB = new HashSet()
    if (addChildrenFlag && enumerationLinkTest != null) {
      enumerationLinkTest.enumerationB = enumeration
      (1..(number+2)).each { i ->
      linksAsB.add(enumerationLinkTest.getTestObject(i+(10*number), i-1))
      }
    }
    enumeration.setLinksAsB(linksAsB)

    enumeration
  }

  @Override
  public BaseDomain updateDomainObject(Integer number, BaseDomain domain) {
    Enumeration source = getTestObject(number, 0)
    Enumeration target = (Enumeration)domain
    target.setName(source.getName())
    target.setTableName(source.getTableName())
    target.setTableNameCamelCase(source.getTableNameCamelCase())
    target.setSchemaName(source.getSchemaName())
    target.setPostCreateSQL(source.getPostCreateSQL())
    target.setChildTableSynchMethod(source.getChildTableSynchMethod())
    target.setAutoCreationMethod(source.getAutoCreationMethod())
    target.setFolderTag(source.getFolderTag())
    target.setJavaPackage(source.getJavaPackage())
    target.setColumn1Name(source.getColumn1Name())
    target.setColumn1NameCamelCase(source.getColumn1NameCamelCase())
    target.setColumn1DataType(source.getColumn1DataType())
    target.setColumn1DbIndex(source.getColumn1DbIndex())
    target.setColumn1NotNullFlag(source.getColumn1NotNullFlag())
    target.setColumn1Default(source.getColumn1Default())
    target.setColumn2Name(source.getColumn2Name())
    target.setColumn2NameCamelCase(source.getColumn2NameCamelCase())
    target.setColumn2DataType(source.getColumn2DataType())
    target.setColumn2DBIndex(source.getColumn2DBIndex())
    target.setColumn2NotNullFlag(source.getColumn2NotNullFlag())
    target.setColumn2Default(source.getColumn2Default())
    target.setColumn3Name(source.getColumn3Name())
    target.setColumn3NameCamelCase(source.getColumn3NameCamelCase())
    target.setColumn3DataType(source.getColumn3DataType())
    target.setColumn3DBIndex(source.getColumn3DBIndex())
    target.setColumn3NotNullFlag(source.getColumn3NotNullFlag())
    target.setColumn3Default(source.getColumn3Default())
    target.setColumn4Name(source.getColumn4Name())
    target.setColumn4NameCamelCase(source.getColumn4NameCamelCase())
    target.setColumn4DataType(source.getColumn4DataType())
    target.setColumn4DBIndex(source.getColumn4DBIndex())
    target.setColumn4NotNullFlag(source.getColumn4NotNullFlag())
    target.setColumn4Default(source.getColumn4Default())
    target.setColumn5Name(source.getColumn5Name())
    target.setColumn5NameCamelCase(source.getColumn5NameCamelCase())
    target.setColumn5DataType(source.getColumn5DataType())
    target.setColumn5DBIndex(source.getColumn5DBIndex())
    target.setColumn5NotNullFlag(source.getColumn5NotNullFlag())
    target.setColumn5Default(source.getColumn5Default())

    target.enumerationValues.each {
      enumerationValueTest.getDao().delete(it)
    }
    target.enumerationValues.clear()
    source.enumerationValues.each {
      it.enumeration = target
    }
    target.enumerationValues.addAll(source.enumerationValues)
    target.linksAsA.each {
      enumerationLinkTest.getDao().delete(it)
    }
    target.linksAsA.clear()
    source.linksAsA.each {
      it.enumerationA = target
    }
    target.linksAsA.addAll(source.linksAsA)
    target.linksAsB.each {
      enumerationLinkTest.getDao().delete(it)
    }
    target.linksAsB.clear()
    source.linksAsB.each {
      it.enumerationB = target
    }
    target.linksAsB.addAll(source.linksAsB)

    return source
  }

  @Override
  public void assertDomainUpdates(BaseDomain expected, BaseDomain actual) {
    Enumeration expectedD = (Enumeration)expected
    Enumeration actualD = (Enumeration)actual
    assertEquals("name is different than expected", expectedD.getName(), actualD.getName())
    assertEquals("tableName is different than expected", expectedD.getTableName(), actualD.getTableName())
    assertEquals("tableNameCamelCase is different than expected", expectedD.getTableNameCamelCase(), actualD.getTableNameCamelCase())
    assertEquals("schemaName is different than expected", expectedD.getSchemaName(), actualD.getSchemaName())
    assertEquals("postCreateSQL is different than expected", expectedD.getPostCreateSQL(), actualD.getPostCreateSQL())
    assertEquals("childTableSynchMethod is different than expected", expectedD.getChildTableSynchMethod(), actualD.getChildTableSynchMethod())
    assertEquals("autoCreationMethod is different than expected", expectedD.getAutoCreationMethod(), actualD.getAutoCreationMethod())
    assertEquals("folderTag is different than expected", expectedD.getFolderTag(), actualD.getFolderTag())
    assertEquals("javaPackage is different than expected", expectedD.getJavaPackage(), actualD.getJavaPackage())
    assertEquals("column1Name is different than expected", expectedD.getColumn1Name(), actualD.getColumn1Name())
    assertEquals("column1NameCamelCase is different than expected", expectedD.getColumn1NameCamelCase(), actualD.getColumn1NameCamelCase())
    assertEquals("column1DataType is different than expected", expectedD.getColumn1DataType(), actualD.getColumn1DataType())
    assertEquals("column1DbIndex is different than expected", expectedD.getColumn1DbIndex(), actualD.getColumn1DbIndex())
    assertEquals("column1NotNullFlag is different than expected", expectedD.getColumn1NotNullFlag(), actualD.getColumn1NotNullFlag())
    assertEquals("column1Default is different than expected", expectedD.getColumn1Default(), actualD.getColumn1Default())
    assertEquals("column2Name is different than expected", expectedD.getColumn2Name(), actualD.getColumn2Name())
    assertEquals("column2NameCamelCase is different than expected", expectedD.getColumn2NameCamelCase(), actualD.getColumn2NameCamelCase())
    assertEquals("column2DataType is different than expected", expectedD.getColumn2DataType(), actualD.getColumn2DataType())
    assertEquals("column2DBIndex is different than expected", expectedD.getColumn2DBIndex(), actualD.getColumn2DBIndex())
    assertEquals("column2NotNullFlag is different than expected", expectedD.getColumn2NotNullFlag(), actualD.getColumn2NotNullFlag())
    assertEquals("column2Default is different than expected", expectedD.getColumn2Default(), actualD.getColumn2Default())
    assertEquals("column3Name is different than expected", expectedD.getColumn3Name(), actualD.getColumn3Name())
    assertEquals("column3NameCamelCase is different than expected", expectedD.getColumn3NameCamelCase(), actualD.getColumn3NameCamelCase())
    assertEquals("column3DataType is different than expected", expectedD.getColumn3DataType(), actualD.getColumn3DataType())
    assertEquals("column3DBIndex is different than expected", expectedD.getColumn3DBIndex(), actualD.getColumn3DBIndex())
    assertEquals("column3NotNullFlag is different than expected", expectedD.getColumn3NotNullFlag(), actualD.getColumn3NotNullFlag())
    assertEquals("column3Default is different than expected", expectedD.getColumn3Default(), actualD.getColumn3Default())
    assertEquals("column4Name is different than expected", expectedD.getColumn4Name(), actualD.getColumn4Name())
    assertEquals("column4NameCamelCase is different than expected", expectedD.getColumn4NameCamelCase(), actualD.getColumn4NameCamelCase())
    assertEquals("column4DataType is different than expected", expectedD.getColumn4DataType(), actualD.getColumn4DataType())
    assertEquals("column4DBIndex is different than expected", expectedD.getColumn4DBIndex(), actualD.getColumn4DBIndex())
    assertEquals("column4NotNullFlag is different than expected", expectedD.getColumn4NotNullFlag(), actualD.getColumn4NotNullFlag())
    assertEquals("column4Default is different than expected", expectedD.getColumn4Default(), actualD.getColumn4Default())
    assertEquals("column5Name is different than expected", expectedD.getColumn5Name(), actualD.getColumn5Name())
    assertEquals("column5NameCamelCase is different than expected", expectedD.getColumn5NameCamelCase(), actualD.getColumn5NameCamelCase())
    assertEquals("column5DataType is different than expected", expectedD.getColumn5DataType(), actualD.getColumn5DataType())
    assertEquals("column5DBIndex is different than expected", expectedD.getColumn5DBIndex(), actualD.getColumn5DBIndex())
    assertEquals("column5NotNullFlag is different than expected", expectedD.getColumn5NotNullFlag(), actualD.getColumn5NotNullFlag())
    assertEquals("column5Default is different than expected", expectedD.getColumn5Default(), actualD.getColumn5Default())
    assertEquals("size of enumerationValues is different than expected", expectedD.enumerationValues.size(), actualD.enumerationValues.size())
    assertEquals("size of linksAsA is different than expected", expectedD.linksAsA.size(), actualD.linksAsA.size())
    assertEquals("size of linksAsB is different than expected", expectedD.linksAsB.size(), actualD.linksAsB.size())
  }
  
  @Override
  void deleteObject(BaseDomain domain) {
    if (domain == null) {
      return
    }
    Enumeration target = (Enumeration)domain

    enumerationDao.delete(target)
    enumerationDao.flush()
    enumerationDao.evict(target)
  }
}