/**
Copyright 2011-2015 Timothy James Hruska (tjhruska@yahoo.com)

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
  
package com.tjhruska.mc.domain.system

import org.springframework.context.annotation.Lazy
import org.springframework.beans.factory.annotation.Autowired
import static org.junit.Assert.*
import org.junit.Before
import org.junit.Ignore

import com.tjhruska.mc.database.BaseDomain
import com.tjhruska.mc.database.DaoDomain
import com.tjhruska.mc.database.test.GeneratedDomainAndDaoTestIface

import com.tjhruska.mc.database.test.GeneratedDomainAndDaoTest
import com.tjhruska.mc.domain.system.Table
import com.tjhruska.mc.domain.system.TableTest
import com.tjhruska.mc.enums.Container
import com.tjhruska.mc.enums.Datatype
import com.tjhruska.mc.enums.DbIndex
import java.util.ArrayList
import java.util.List
import com.tjhruska.mc.domain.system.Column
import com.tjhruska.mc.domain.system.ColumnTest
  

//    Class contains database constraints which can't be accommodated in autogenerated code.
//    To activate test: extend test class, and tweak fields with constraints to match database expectations.
//    (Extended class won't be wiped out on regeneration, and must continue to match database expectations.)
@Ignore 
class ColumnTestImpl extends GeneratedDomainAndDaoTest implements ColumnTest {
  
  @Autowired
  DaoDomain<Column> columnDao

  ColumnTest columnTest = this
  @Autowired
  @Lazy
  TableTest tableTest

  @Override
  public DaoDomain getDao() {
    columnDao
  }

  Table table
  Column guiFieldGroupGuardColumn

  @Override
  public BaseDomain getTestObject(Integer number, Integer sequence) {
    Column column = new Column()
    
    if (table == null) {
      column.setTable(tableTest.persistTestObject(number))
      column.table.columns.add(column)
    } else {
      column.setTable(table)
    }
    column.setSequence((Short)sequence)
    column.setName("name${number}")
    column.setDescription("description${number}")
    column.setNameCamelCase("name_camel_case${number}")
    column.setDatatype(Datatype.getDatatypeBySequence(1))
    column.setDatatypeRef1("datatype_ref1${number}")
    column.setDatatypeRef2("datatype_ref2${number}")
    column.setDatatypeRef3("datatype_ref3${number}")
    column.setDbIndex(DbIndex.getDbIndexBySequence(1))
    column.setPrimaryKeyFlag(number == 0 || 13%number == 0)
    column.setForeignKeyFlag(number == 0 || 14%number == 0)
    column.setForeignIncludeInCanonicalFlag(number == 0 || 15%number == 0)
    column.setForeignTableId(number)
    column.setForeignPogoCollectionDatatype(Container.getContainerBySequence(1))
    column.setForeignPojoCollectionNameCamelCase("fk_pojo_collection_name_camel_case${number}")
    column.setForeignPojoCollectionLocalKeyColumnId(number)
    column.setForeignPojoCollectionORMCascade("fk_pojo_collection_orm_cascade${number}")
    column.setForeignOrmLazyFlag(number == 0 || 21%number == 0)
    column.setForeignKeyLinkThruToTableId(number)
    column.setForeignKeyOrmInverseFlag(number == 0 || 23%number == 0)
    column.setFkGuiColumnFilterForeign("fk_gui_column_filter_foreign${number}")
    column.setFkGuiColumnFilterLocal("fk_gui_column_filter_local${number}")
    column.setNotNullFlag(number == 0 || 26%number == 0)
    column.setDefaultValue("default_value${number}")
    column.setConstraintSQL("constraint_sql${number}")
    column.setPojoConstructorFieldFlag(number == 0 || 29%number == 0)
    column.setGuiHeader("gui_header${number}")
    column.setGuiToolTip("gui_tool_tip${number}")
    column.setGuiSortableFlag(number == 0 || 32%number == 0)
    column.setGuiFieldGroupName("gui_field_group_name${number}")
    column.setGuiFieldGroupSequence((Short)(34 * number))
    if (guiFieldGroupGuardColumn == null) {
      column.setGuiFieldGroupGuardColumn(null)
      column.guiFieldGroupGuardColumn.guardedColumns.add(column)
    } else {
      column.setGuiFieldGroupGuardColumn(guiFieldGroupGuardColumn)
    }
    column.setGuiFieldGroupFieldRequiredFlag(number == 0 || 36%number == 0)
    
    List<Column> guardedColumns = new ArrayList()
    if (columnTest != null) {
      columnTest.guiFieldGroupGuardColumn = column
      (1..(number+2)).each { i ->
      guardedColumns.add(columnTest.getTestObject(i+(10*number), i-1))
      }
    }
    column.setGuardedColumns(guardedColumns)

    column
  }

  @Override
  public BaseDomain updateDomainObject(Integer number, BaseDomain domain) {
    Column source = getTestObject(number, 0)
    Column target = (Column)domain
    target.setTable(source.getTable())
    target.setSequence(source.getSequence())
    target.setName(source.getName())
    target.setDescription(source.getDescription())
    target.setNameCamelCase(source.getNameCamelCase())
    target.setDatatype(source.getDatatype())
    target.setDatatypeRef1(source.getDatatypeRef1())
    target.setDatatypeRef2(source.getDatatypeRef2())
    target.setDatatypeRef3(source.getDatatypeRef3())
    target.setDbIndex(source.getDbIndex())
    target.setPrimaryKeyFlag(source.getPrimaryKeyFlag())
    target.setForeignKeyFlag(source.getForeignKeyFlag())
    target.setForeignIncludeInCanonicalFlag(source.getForeignIncludeInCanonicalFlag())
    target.setForeignTableId(source.getForeignTableId())
    target.setForeignPogoCollectionDatatype(source.getForeignPogoCollectionDatatype())
    target.setForeignPojoCollectionNameCamelCase(source.getForeignPojoCollectionNameCamelCase())
    target.setForeignPojoCollectionLocalKeyColumnId(source.getForeignPojoCollectionLocalKeyColumnId())
    target.setForeignPojoCollectionORMCascade(source.getForeignPojoCollectionORMCascade())
    target.setForeignOrmLazyFlag(source.getForeignOrmLazyFlag())
    target.setForeignKeyLinkThruToTableId(source.getForeignKeyLinkThruToTableId())
    target.setForeignKeyOrmInverseFlag(source.getForeignKeyOrmInverseFlag())
    target.setFkGuiColumnFilterForeign(source.getFkGuiColumnFilterForeign())
    target.setFkGuiColumnFilterLocal(source.getFkGuiColumnFilterLocal())
    target.setNotNullFlag(source.getNotNullFlag())
    target.setDefaultValue(source.getDefaultValue())
    target.setConstraintSQL(source.getConstraintSQL())
    target.setPojoConstructorFieldFlag(source.getPojoConstructorFieldFlag())
    target.setGuiHeader(source.getGuiHeader())
    target.setGuiToolTip(source.getGuiToolTip())
    target.setGuiSortableFlag(source.getGuiSortableFlag())
    target.setGuiFieldGroupName(source.getGuiFieldGroupName())
    target.setGuiFieldGroupSequence(source.getGuiFieldGroupSequence())
    target.setGuiFieldGroupGuardColumn(source.getGuiFieldGroupGuardColumn())
    target.setGuiFieldGroupFieldRequiredFlag(source.getGuiFieldGroupFieldRequiredFlag())

    target.guardedColumns.each {
      columnTest.getDao().delete(it)
    }
    target.guardedColumns.clear()
    source.guardedColumns.each {
      it.guiFieldGroupGuardColumn = target
    }
    target.guardedColumns.addAll(source.guardedColumns)

    return source
  }

  @Override
  public void assertDomainUpdates(BaseDomain expected, BaseDomain actual) {
    Column expectedD = (Column)expected
    Column actualD = (Column)actual
    tableTest.assertDomainUpdates(expectedD.getTable(), actualD.getTable())
    assertEquals("sequence is different than expected", expectedD.getSequence(), actualD.getSequence())
    assertEquals("name is different than expected", expectedD.getName(), actualD.getName())
    assertEquals("description is different than expected", expectedD.getDescription(), actualD.getDescription())
    assertEquals("nameCamelCase is different than expected", expectedD.getNameCamelCase(), actualD.getNameCamelCase())
    assertEquals("datatype is different than expected", expectedD.getDatatype(), actualD.getDatatype())
    assertEquals("datatypeRef1 is different than expected", expectedD.getDatatypeRef1(), actualD.getDatatypeRef1())
    assertEquals("datatypeRef2 is different than expected", expectedD.getDatatypeRef2(), actualD.getDatatypeRef2())
    assertEquals("datatypeRef3 is different than expected", expectedD.getDatatypeRef3(), actualD.getDatatypeRef3())
    assertEquals("dbIndex is different than expected", expectedD.getDbIndex(), actualD.getDbIndex())
    assertEquals("primaryKeyFlag is different than expected", expectedD.getPrimaryKeyFlag(), actualD.getPrimaryKeyFlag())
    assertEquals("foreignKeyFlag is different than expected", expectedD.getForeignKeyFlag(), actualD.getForeignKeyFlag())
    assertEquals("foreignIncludeInCanonicalFlag is different than expected", expectedD.getForeignIncludeInCanonicalFlag(), actualD.getForeignIncludeInCanonicalFlag())
    assertEquals("foreignTable is different than expected", expectedD.getForeignTableId(), actualD.getForeignTableId())
    assertEquals("foreignPogoCollectionDatatype is different than expected", expectedD.getForeignPogoCollectionDatatype(), actualD.getForeignPogoCollectionDatatype())
    assertEquals("foreignPojoCollectionNameCamelCase is different than expected", expectedD.getForeignPojoCollectionNameCamelCase(), actualD.getForeignPojoCollectionNameCamelCase())
    assertEquals("foreignPojoCollectionLocalKeyColumn is different than expected", expectedD.getForeignPojoCollectionLocalKeyColumnId(), actualD.getForeignPojoCollectionLocalKeyColumnId())
    assertEquals("foreignPojoCollectionORMCascade is different than expected", expectedD.getForeignPojoCollectionORMCascade(), actualD.getForeignPojoCollectionORMCascade())
    assertEquals("foreignOrmLazyFlag is different than expected", expectedD.getForeignOrmLazyFlag(), actualD.getForeignOrmLazyFlag())
    assertEquals("foreignKeyLinkThruToTable is different than expected", expectedD.getForeignKeyLinkThruToTableId(), actualD.getForeignKeyLinkThruToTableId())
    assertEquals("foreignKeyOrmInverseFlag is different than expected", expectedD.getForeignKeyOrmInverseFlag(), actualD.getForeignKeyOrmInverseFlag())
    assertEquals("fkGuiColumnFilterForeign is different than expected", expectedD.getFkGuiColumnFilterForeign(), actualD.getFkGuiColumnFilterForeign())
    assertEquals("fkGuiColumnFilterLocal is different than expected", expectedD.getFkGuiColumnFilterLocal(), actualD.getFkGuiColumnFilterLocal())
    assertEquals("notNullFlag is different than expected", expectedD.getNotNullFlag(), actualD.getNotNullFlag())
    assertEquals("defaultValue is different than expected", expectedD.getDefaultValue(), actualD.getDefaultValue())
    assertEquals("constraintSQL is different than expected", expectedD.getConstraintSQL(), actualD.getConstraintSQL())
    assertEquals("pojoConstructorFieldFlag is different than expected", expectedD.getPojoConstructorFieldFlag(), actualD.getPojoConstructorFieldFlag())
    assertEquals("guiHeader is different than expected", expectedD.getGuiHeader(), actualD.getGuiHeader())
    assertEquals("guiToolTip is different than expected", expectedD.getGuiToolTip(), actualD.getGuiToolTip())
    assertEquals("guiSortableFlag is different than expected", expectedD.getGuiSortableFlag(), actualD.getGuiSortableFlag())
    assertEquals("guiFieldGroupName is different than expected", expectedD.getGuiFieldGroupName(), actualD.getGuiFieldGroupName())
    assertEquals("guiFieldGroupSequence is different than expected", expectedD.getGuiFieldGroupSequence(), actualD.getGuiFieldGroupSequence())
    columnTest.assertDomainUpdates(expectedD.getGuiFieldGroupGuardColumn(), actualD.getGuiFieldGroupGuardColumn())
    assertEquals("guiFieldGroupFieldRequiredFlag is different than expected", expectedD.getGuiFieldGroupFieldRequiredFlag(), actualD.getGuiFieldGroupFieldRequiredFlag())
    assertEquals("size of guardedColumns is different than expected", expectedD.guardedColumns.size(), actualD.guardedColumns.size())
  }
  
  @Override
  void deleteObject(BaseDomain domain) {
    if (domain == null) {
      return
    }
    Column target = (Column)domain

    tableTest.deleteObject(target.table)
    target?.guardedColumns.each {
      columnTest.deleteObject(it)
    }
    target?.guardedColumns.clear()
    columnDao.flush()
    columnDao.evict(target)
  }
}