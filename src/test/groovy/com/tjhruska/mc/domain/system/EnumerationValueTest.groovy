/**
Copyright 2011-2015 Timothy James Hruska (tjhruska@yahoo.com)

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
  
package com.tjhruska.mc.domain.system

import org.springframework.beans.factory.annotation.Autowired
import static org.junit.Assert.*
import org.junit.Before
import org.junit.Ignore

import com.tjhruska.mc.database.BaseDomain
import com.tjhruska.mc.database.DaoDomain
import com.tjhruska.mc.database.test.GeneratedDomainAndDaoTest
import com.tjhruska.mc.domain.system.Enumeration
import com.tjhruska.mc.domain.system.EnumerationTest
  

//    Class contains database constraints which can't be accommodated in autogenerated code.
//    To activate test: extend test class, and tweak fields with constraints to match database expectations.
//    (Extended class won't be wiped out on regeneration, and must continue to match database expectations.)
@Ignore 
class EnumerationValueTest extends GeneratedDomainAndDaoTest {
  
  @Autowired
  DaoDomain<EnumerationValue> enumerationValueDao

  @Override
  public DaoDomain getDao() {
    enumerationValueDao
  }

  Enumeration enumeration

  @Override
  public BaseDomain getTestObject(Integer number, Integer sequence) {
    EnumerationValue enumerationValue = new EnumerationValue()
    
    if (enumeration == null) {
      enumerationValue.setEnumeration(new EnumerationTest(enumerationDao : getDao()).persistTestObject(number + 123))
      enumerationValue.enumeration.enumerationValues.add(enumerationValue)
    } else {
      enumerationValue.setEnumeration(enumeration)
    }
    enumerationValue.setName("name${number}")
    enumerationValue.setDescription("description${number}")
    enumerationValue.setSequence((Short)sequence)
    enumerationValue.setColumn1Value("column1_value${number}")
    enumerationValue.setColumn2Value("column2_value${number}")
    enumerationValue.setColumn3Value("column3_value${number}")
    enumerationValue.setColumn4Value("column4_value${number}")
    enumerationValue.setColumn5Value("column5_value${number}")
    
    enumerationValue
  }

  @Override
  public BaseDomain updateDomainObject(Integer number, BaseDomain domain) {
    EnumerationValue source = getTestObject(number, 0)
    EnumerationValue target = (EnumerationValue)domain
    target.setEnumeration(source.getEnumeration())
    target.setName(source.getName())
    target.setDescription(source.getDescription())
    target.setSequence(source.getSequence())
    target.setColumn1Value(source.getColumn1Value())
    target.setColumn2Value(source.getColumn2Value())
    target.setColumn3Value(source.getColumn3Value())
    target.setColumn4Value(source.getColumn4Value())
    target.setColumn5Value(source.getColumn5Value())

    return source
  }

  @Override
  public void assertDomainUpdates(BaseDomain expected, BaseDomain actual) {
    EnumerationValue expectedD = (EnumerationValue)expected
    EnumerationValue actualD = (EnumerationValue)actual
    new EnumerationTest().assertDomainUpdates(expectedD.getEnumeration(), actualD.getEnumeration())
    assertEquals("name is different than expected", expectedD.getName(), actualD.getName())
    assertEquals("description is different than expected", expectedD.getDescription(), actualD.getDescription())
    assertEquals("sequence is different than expected", expectedD.getSequence(), actualD.getSequence())
    assertEquals("column1Value is different than expected", expectedD.getColumn1Value(), actualD.getColumn1Value())
    assertEquals("column2Value is different than expected", expectedD.getColumn2Value(), actualD.getColumn2Value())
    assertEquals("column3Value is different than expected", expectedD.getColumn3Value(), actualD.getColumn3Value())
    assertEquals("column4Value is different than expected", expectedD.getColumn4Value(), actualD.getColumn4Value())
    assertEquals("column5Value is different than expected", expectedD.getColumn5Value(), actualD.getColumn5Value())
  }

  @Override
  public void deleteChildrenIfNeeded(BaseDomain domain) {
    EnumerationValue target = (EnumerationValue)domain
  }
}