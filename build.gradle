apply plugin: 'java'
apply plugin: 'groovy'
//apply plugin: 'jetty'
apply plugin: 'eclipse'
apply plugin: 'maven'

group = 'com.tjhruska.mc-framework'
version = '1.0.1'

sourceCompatibility=1.7

def props = new Properties();
def localProperties = new File("local.properties")
if (localProperties.exists()) localProperties.withInputStream { props.load(it) }

configurations {
    deployerJars
}

ext {
	springVersion = '4.0.4.RELEASE'
}

repositories {
	mavenCentral()
	maven {
		url 'http://download.java.net/maven/2'
	}
}

dependencies {
	compile "org.codehaus.groovy:groovy-all:2.2.2"

	compile "org.springframework:spring-context:$springVersion"
	compile "org.springframework:spring-core:$springVersion"
	compile "org.springframework:spring-beans:$springVersion"
	compile "org.springframework:spring-test:$springVersion"

	compile "org.springframework:spring-webmvc:$springVersion"
	compile "org.springframework:spring-jdbc:$springVersion"
	compile "org.springframework:spring-tx:$springVersion"
	compile "org.springframework:spring-orm:$springVersion"

//	compile "org.springframework:spring-hibernate3:2.0.8"

	compile "com.fasterxml.jackson.core:jackson-databind:2.3.3"
	compile "com.fasterxml.jackson.core:jackson-core:2.3.3"
	compile "com.fasterxml.jackson.core:jackson-annotations:2.3.3"

//	compile "org.codehaus.jackson:jackson-core-asl:1.9.13"
//	compile "org.codehaus.jackson:jackson-mapper-asl:1.9.13"

	compile "postgresql:postgresql:9.1-901.jdbc4"

	compile "org.hibernate:hibernate-core:4.3.5.Final"

	compile "javax.servlet:javax.servlet-api:3.0.1"
	compile "javax.servlet:jstl:1.2"

//              compile "javax.transaction:jta:1.0.1B"

	compile "com.google.guava:guava:17.0"

	compile "org.apache.tomcat:tomcat-jdbc:8.0.8"

	compile "joda-time:joda-time:2.3"
	compile "joda-time:joda-time-hibernate:1.3"

	compile "org.slf4j:slf4j-api:1.7.7"
	compile "log4j:log4j:1.2.16"
	compile "ch.qos.logback:logback-classic:1.1.2"

	compile "junit:junit:4.11"

	runtime "org.javassist:javassist:3.18.1-GA"
}

task packageJavadoc(type: Jar, dependsOn: 'javadoc') {
    from javadoc.destinationDir
    classifier = 'javadoc'
}

task packageSources(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives jar
    archives packageJavadoc
    archives packageSources
}

uploadArchives {
    repositories {
        mavenDeployer {
            configuration = configurations.deployerJars
            repository(url: props.get('maven.repository.url')) {
                authentication(userName: props.get('maven.repository.user'), password: props.get('maven.repository.password'))
            }
        }
    }
}

task createWrapper(type: Wrapper) {
    gradleVersion = '1.0-milestone-6'
}

task copyTemplate(type: Copy) {
	def newProjectName = it.hasProperty("target") ? target : null
	if (newProjectName == null)
		logger.error "usage:  gradle copyTemplate -Ptarget=<target>"
	else
		logger.lifecycle ("copying mc_template to $newProjectName and setting the new project up.")

}
